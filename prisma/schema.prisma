datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

model User {
    id                 String               @id @default(cuid())
    name               String?
    email              String               @unique
    emailVerified      DateTime?
    image              String?
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    Expense            Expense[]
    TransactionAccount TransactionAccount[]
    Account            Account[]
    Session            Session[]
}

model Category {
    id      String    @id @default(cuid())
    name    String
    image   String?
    userId  String
    Expense Expense[]

    @@unique([name, userId]) // Composite unique constraint
}

model Expense {
    id             String       @id @default(cuid())
    amount         Float
    description    String?
    date           DateTime
    categoryId     String?
    userId         String
    user           User         @relation(fields: [userId], references: [id])
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    Category       Category?    @relation(fields: [categoryId], references: [id])
    transaction_id String?
    Transaction    Transaction? @relation(fields: [transaction_id], references: [transaction_id])
}

model TransactionAccount {
    id          String        @id @default(cuid())
    accountNo   String        @unique
    name        String
    type        AccountType
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    userId      String
    user        User          @relation(fields: [userId], references: [id])
    Transaction Transaction[]

    @@map("trans_account")
}

enum AccountType {
    BANK
    CREDIT_CARD
    WALLET
    SAVINGS
}

enum TransactionType {
    CREDIT
    DEBIT
}

model Transaction {
    transaction_id   String             @id @default(cuid())
    transaction_date DateTime
    amount           Float
    description      String?
    type             TransactionType
    account_id       String
    account          TransactionAccount @relation(fields: [account_id], references: [id])
    Expense          Expense[]

    @@map("transactions") // Ensure the model name matches the table name if you need to map it
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
